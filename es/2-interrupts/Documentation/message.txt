#include "stm32f303xe.h"
#include <stdio.h>
#include <string.h>

void SystemClock_Config(void);
void GPIOx_Init(void);
void USART2_Init(void);
void USART2_SendString(char *str);
char *USART2_ReceiveString(void);
void Delay(uint32_t time_ms);

extern "C" void EXTI9_5_IRQHandler(void)
{
    // Reset interrupt flag
    EXTI->PR = EXTI_PR_PR8;  

    // Toggle the LED
    GPIOA->ODR ^= GPIO_ODR_10;
} 

extern "C" void EXTI15_10_IRQHandler(void)
{
    // Reset interrupt flag
    EXTI->PR = EXTI_PR_PR13;  

    // Toggle the LED
    GPIOA->ODR ^= GPIO_ODR_5;
}

const int BUFLENGTH = 100;

char sndBuf[BUFLENGTH];
char rcvBuf[BUFLENGTH];

int main(void)
{
    // Configure the system clock
    SystemClock_Config();
    GPIOx_Init();//Function updated to include PC13 as input
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // Enable the system configuration controller clock

    SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR3_EXTI8_PA; // Select port A pin 8
    SYSCFG->EXTICR[2] |= SYSCFG_EXTICR3_EXTI8_PA;
    EXTI->FTSR |= EXTI_FTSR_TR8; // Set falling edge trigger
    EXTI->IMR |= EXTI_IMR_MR8; // Enable interrupt request from line 8
    NVIC_EnableIRQ(EXTI9_5_IRQn); // Enable EXTI4 interrupt

    SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR4_EXTI13_PC; // Select port C pin 13
    SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI13_PC;
    EXTI->FTSR |= EXTI_FTSR_TR13; // Set falling edge trigger
    EXTI->RTSR |= EXTI_RTSR_TR13; // Set rising edge trigger
    EXTI->IMR |= EXTI_IMR_MR13; // Enable interrupt request from line 13
    NVIC_EnableIRQ(EXTI15_10_IRQn); // Enable EXTI15_10 interrupt
  
    while (1)
    {
    }
}

// Configure the system clock to 72 MHz. This means the APB1 peripheral clock and also the USART2 will be clocked at 36 MHz.
void SystemClock_Config(void)
{
    // Configure Flash latency for 48 < HCLK â‰¤ 72 MHz, see datasheet. Do this before setting the system clock to 72 MHz.
    FLASH->ACR &= ~FLASH_ACR_LATENCY;
    FLASH->ACR |= FLASH_ACR_LATENCY_2;

    // Enable the HSI (internal high-speed) oscillator
    RCC->CR |= RCC_CR_HSION;
    while (!(RCC->CR & RCC_CR_HSIRDY))
        ; // Wait until HSI is ready

    // Set the APB1 prescaler to 2
    RCC->CFGR &= ~RCC_CFGR_PPRE1;
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;

    // Set the PLL SRC to HSI and PREDIV to /1
    RCC->CFGR &= ~RCC_CFGR_PLLSRC;
    RCC->CFGR |= RCC_CFGR_PLLSRC_HSI_PREDIV;

    // Set PLL multiplier to 9 (8 MHz * 9 = 72 MHz)
    RCC->CFGR &= ~RCC_CFGR_PLLMUL;
    RCC->CFGR |= RCC_CFGR_PLLMUL9;

    // Enable the PLL
    RCC->CR |= RCC_CR_PLLON;
    while (!(RCC->CR & RCC_CR_PLLRDY))
        ; // Wait until PLL is ready

    // Select PLL as system clock source
    RCC->CFGR &= ~RCC_CFGR_SW;
    RCC->CFGR |= RCC_CFGR_SW_PLL;
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL)
        ; // Wait until PLL becomes the system clock

    // Update the system core clock variable
    SystemCoreClockUpdate();
}

void GPIOx_Init(void)
{
    // Enable GPIOA clock
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
    // Set pin PA5 as output
    GPIOA->MODER &= ~GPIO_MODER_MODER5;            // Reset bits
    GPIOA->MODER |= 0b01 << GPIO_MODER_MODER5_Pos; // Set bits for output mode

    // Enable GPIOC clock by setting pin 19 of the RCC_AHBENR register
    RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
    // Set pin PC13 as input
    GPIOC->MODER &= ~GPIO_MODER_MODER13; // Reset bits and set PC13 as input by enabling the schmitt trigger circuit
    GPIOC->PUPDR |= 0b01 << GPIO_PUPDR_PUPDR13_Pos; // Enable the pull-up resistor
    //Set pin PA10(D2) as output
    GPIOA->MODER &= ~GPIO_MODER_MODER10; // Reset bits
    GPIOA->MODER |= 0b01 << GPIO_MODER_MODER10_Pos; 
    //Set pin PA8(D7) as input and enable the pull-up resistor
    GPIOA->MODER &= ~GPIO_MODER_MODER8; // Reset bits
    GPIOA->PUPDR |= 0b01 << GPIO_PUPDR_PUPDR8_Pos;
}

// Initialize USART2
void USART2_Init(void)
{
    // Enable USART2 clock
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
    // Set GPIO pin PA2 to alternate function.
    GPIOA->MODER = (GPIOA->MODER & ~GPIO_MODER_MODER2) | (0b10 << GPIO_MODER_MODER2_Pos);
    // Select alternate function AF7 (USART2_TX) for GPIO pin PA2.
    GPIOA->AFR[0] = (GPIOA->AFR[0] & ~GPIO_AFRL_AFRL2) | (0b0111 << GPIO_AFRL_AFRL2_Pos);
    // Set GPIO pin PA3 to alternate function.
    GPIOA->MODER = (GPIOA->MODER & ~GPIO_MODER_MODER3) | (0b10 << GPIO_MODER_MODER3_Pos);
    // Select alternate function AF7 (USART2_RX) for GPIO pin PA3.
    GPIOA->AFR[0] = (GPIOA->AFR[0] & ~GPIO_AFRL_AFRL3) | (0b0111 << GPIO_AFRL_AFRL3_Pos);

    // Configure USART2
    USART2->BRR = 36000000 / 9600; // Assuming 36 MHz clock, 9600 baud rate.
    USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
}

// Send a string through USART2.
void USART2_SendString(char *str)
{
    while (*str)
    {
        // Wait until transmit data register is empty.
        while (!(USART2->ISR & USART_ISR_TXE))
            ;
        USART2->TDR = *str++;
    }
}

// Receive a string through USART2
// This function blocks until a newline '\n' character is received.
char *USART2_ReceiveString(void)
{
    static int i = 0;
    char c = 0;
    USART2->ICR |= USART_ICR_ORECF; // Clear overrun error flag.
    while (i == 0 || c != '\0')
    {
        if (USART2->ISR & USART_ISR_RXNE)
        {

            c = USART2->RDR;
            if (c == '\n') // Return received, so string is complete.
            {
                c = '\0'; // Indicate end of string.
                rcvBuf[i++] = c;
            }
            else
            {
                if (i < BUFLENGTH - 1) // Prevent buffer overflow
                {
                    rcvBuf[i++] = c;
                }
            }
        }
    }
    i = 0; // Prepare for next string.
    return rcvBuf;
}

// Simple delay function, should not be used in serious applications.
void Delay(uint32_t time_ms)
{
    volatile uint32_t i, j;

    for (i = 0; i < time_ms; i++)
        for (j = 0; j < 2000; j++)
            ; // Adjust this loop for shorter or longer delays
}